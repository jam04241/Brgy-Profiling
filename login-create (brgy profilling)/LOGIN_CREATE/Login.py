# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import mysql.connector
from mysql.connector import Error
import tkinter as tk
from tkinter import messagebox
import customtkinter as Ctkinter
from pathlib import Path
import Create_Acc

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"J:\admin\Documents\Andrei_Property\College\2nd Year\1st Sem\1st term\IT 5 (3100)\Brgy-profilling\Brgy-Profiling\login-create (brgy profilling)\login_asset\build\assets\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class login_class:
    def __init__(self):
        self.window = Tk()
        self.window.geometry("1000x700")
        self.window.configure(bg = "#75181A")
        self.login_widget()
    
    def login_widget(self):
        self.canvas = Canvas(
            self.window,
            bg = "#FFFFFF",
            height = 700,
            width = 1000,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)

        self.brgy_bg = PhotoImage(
            file=relative_to_assets("brgy_bg.png"))
        
        self.brgy_bg_place = self.canvas.create_image(
            500.0,
            350.0,
            image= self.brgy_bg
        )
        self.button_image_1 = PhotoImage(
            file=relative_to_assets("togglepass_btn.png"))
        self.button_1 = Button(
            bg="#75181A",
            image= self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: toggle_password(self),#print("togglepass_btn clicked"),
            relief="flat"
        )
        self.button_1.place(
            x=278.0,
            y=365.0,
            width=53.0,
            height=53.0
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        self.image_2 = self.canvas.create_image(
            304.0,
            308.0,
            image= self.image_image_2
        )

        self.entry_1 = Ctkinter.entry = Ctkinter.CTkEntry(
                                        master = self.window,
                                        width=321.03, height=45,
                                        placeholder_text='Username', 
                                        font=("Helvetica", 16), 
                                        corner_radius=20,
                                        border_color="#75181A",
                                        fg_color="#FFFFFF", 
                                        placeholder_text_color="#808080", 
                                        text_color="#000716")
        self.entry_1.place(
            x=364,
            y=293.00000202152603)

        self.entry_2 = Ctkinter.entry = Ctkinter.CTkEntry(
                                        master = self.window,
                                        width=321.03, height=45,
                                        show="✶",
                                        placeholder_text='Password', 
                                        font=("Helvetica", 16), 
                                        corner_radius=20,
                                        border_color="#75181A",
                                        fg_color="#FFFFFF", 
                                        placeholder_text_color="#808080", 
                                        text_color="#000716")
        self.entry_2.place(x=364,y=370.36)

        self.canvas.create_text(
            434.0,
            199.0,
            anchor="nw",
            text="Admin Login",
            fill="#FFFFFF",
            font=("OpenSans Bold", 25 * -1)
        )

        self.login_btn = PhotoImage(
            file=relative_to_assets("login_btn.png"))
        self.button_2 = Button(
            bg="#75181A",
            image= self.login_btn,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: login_action(), #print("login_btn clicked"),
            relief="flat"
        )
        self.button_2.place(
            x=416.0,
            y=448.0,
            width=199.32337951660156,
            height=43.025814056396484
        )

        self.button_image_hover_2 = PhotoImage(
            file=relative_to_assets("login_hover.png"))

        def button_2_hover(e):
            self.button_2.config(
                image= self.button_image_hover_2
            )
        def button_2_leave(e):
            self.button_2.config(
                image= self.login_btn
            )

        self.button_2.bind('<Enter>', button_2_hover)
        self.button_2.bind('<Leave>', button_2_leave)

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            bg="#75181A",
            image= self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: open_create_form(self),
            relief="flat"
        )
            

        self.button_3.place(
            x=427.0,
            y=533.0,
            width=172.0,
            height=43.22072219848633
        )

        self.button_image_hover_3 = PhotoImage(
            file=relative_to_assets("button_hover_2.png"))
                

        def button_3_hover(e):
            self.button_3.config(
            image= self.button_image_hover_3
        )
        def button_3_leave(e):
            self.button_3.config(
                image= self.button_image_3
            )

        self.button_3.bind('<Enter>', button_3_hover)
        self.button_3.bind('<Leave>', button_3_leave)


        def open_create_form(self):           
            self.window.destroy()
            import Create_Acc
            Create_Acc.CreateClass().run()
            
        ########### TOGGLE PASSWORD #############
        def toggle_password(self):
            if self.entry_2.cget('show') == '✶':
                self.entry_2.configure(show='')
        
            else:
                self.entry_2.configure(show="✶")  
        ########### TOGGLE PASSWORD #############


        ###########     DATABASE    #############
        try:
            # Establish MySQL connection
            self.connect = mysql.connector.connect(
                host = 'localhost',
                user = 'root',
                port = 3306,
                database = 'db_brgyprofilling',
                
            )
            self.cursor = self.connect.cursor()

            def login_action():
                username = self.entry_1.get() 
                password = self.entry_2.get()  

                # Check if fields are empty
                if not (username and password):
                    tk.messagebox.showwarning("Warning!", "Invalid Username or Password")
                    return
                else:
                    try:
                        select_query = "SELECT * FROM tbl_adminlogin WHERE Username=%s AND Password=%s;"

                        user_input = (username, password)
                        self.cursor.execute(select_query, user_input)
                        result = self.cursor.fetchone()

                        if result is None:
                            tk.messagebox.showwarning("Warning!", "Invalid Username or Password")
                        else:
                            tk.messagebox.showinfo("Success", f"Login Successful!\nUsername: {username}")

                    except Error as e:
                        print(f"Error connecting to MySQL: {e}")

            self.login_action = login_action

        except Error as e:
            print(f"Error connecting to MySQL: {e}")   

    def run(self):
        try:
            self.window.resizable(False, False)
            self.window.mainloop()

        except Exception as e:
            print(f"Error in main loop: {e}")       
########################################


if __name__ == "__main__":
    create_login = login_class()
    create_login.run()